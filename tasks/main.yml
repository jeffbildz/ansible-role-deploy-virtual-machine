---
- name: deploy-virtual-machine | main.yml | Get VMs list
  community.libvirt.virt:
    command: list_vms
  register: existing_vms
  changed_when: no

- name: deploy-virtual-machine | main.yml | Create VM if not exists
  block:
    - name: Download base image
      get_url:
        url: "{{ base_image_url }}"
        dest: "/tmp/{{ base_image_name }}"
        checksum: "sha256:{{ base_image_sha }}"

    - name: deploy-virtual-machine | main.yml | Copy base image to libvirt directory
      copy:
        dest: "{{ libvirt_pool_dir }}/{{ vm_name }}.qcow2"
        src: "/tmp/{{ base_image_name }}"
        force: no
        remote_src: yes
        mode: 0660
      register: copy_results

    - name: deploy-virtual-machine | main.yml | Configure the image
      command: |
        virt-customize -a {{ libvirt_pool_dir }}/{{ vm_name }}.qcow2 \
        --hostname {{ vm_name }} \
        --root-password password:{{ vm_root_pass }} \
        --ssh-inject 'root:file:{{ ssh_key }}' \
        --uninstall cloud-init --selinux-relabel
      when: copy_results is changed

    - name: deploy-virtual-machine | main.yml | Define vm
      community.libvirt.virt:
        command: define
        xml: "{{ lookup('template', 'vm-template.xml.j2') }}"
      when: "vm_name not in existing_vms.list_vms"

    - name: deploy-virtual-machine | main.yml | Ensure VM is started
      community.libvirt.virt:
        name: "{{ vm_name }}"
        state: running
      register: vm_start_results
      until: "vm_start_results is success"
      retries: 15
      delay: 2

    - name: deploy-virtual-machine | main.yml | Ensure temporary file is deleted
      file:
        path: "/tmp/{{ base_image_name }}"
        state: absent
      when: cleanup_tmp | bool
